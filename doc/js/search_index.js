var search_data = {"index":{"searchIndex":["torrentprocessor","config","console","controller","database","formatter","plugin","cfgplugin","command","dbplugin","dbpluginbase","pluginmanager","tester","utplugin","processor","tpsetup","torrentdata","utorrentwebui","add_filter()","applocked?()","apply_seed_limit_filters()","aquire_lock()","askuser()","buildbatchinsertquery()","buildbatchupdatequery()","buildcreatequery()","buildinsertorreplacequery()","buildupdatequery()","cache()","cfg_addfilter()","cfg_delfilter()","cfg_ip()","cfg_listfilters()","cfg_port()","cfg_pwd()","cfg_setup()","cfg_user()","checksetupcompleted()","checksetupcompleted()","close()","command()","command_list()","configexists?()","configurecommands()","configureconfigcommands()","configureconsolecommands()","configuredbcommands()","configureutorrentcommands()","connect()","consoleheader()","consolehelp()","copy_torrent()","create()","create_cache()","dbexists?()","dbinsert()","dbsetlock()","db_changestate()","db_close()","db_connect()","db_list_tables()","db_reconcile()","db_schema()","db_torrent_ratios()","db_torrent_states()","db_update()","delete_cache()","delete_filter()","delete_torrent()","desc()","displaycommandlist()","display_current_torrent_list()","dump_jobprops()","dump_plugins()","execute()","execute()","execute()","execute_batch()","exists_in_db?()","getquery()","gettoken()","get_target_seed_ratio()","get_torrent_job_properties()","get_torrent_list()","get_torrent_list_using_cache()","get_utorrent_settings()","interactivemode()","interactivemode()","is_console_cmd?()","label()","label=()","label=()","load()","lockapp()","log()","logo()","msg()","msg=()","msg=()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nocmdlinearg()","outputmode()","pheader()","phr()","pqueryresults()","parselistrequestresponse()","parseresponse()","parsetorrentlistcacheresponse()","parsetorrentlistresponse()","prevstate()","prevstate=()","prevstate=()","printheader()","process()","process()","processcmd()","processcmdlineargs()","processconsolecmd()","processdbcmd()","process_torrents_awaiting_processing()","process_torrents_completed_seeding()","quote()","read_cache()","read_lock()","read_torrent_state()","register_cmds()","register_cmds()","register_cmds()","register_cmds()","register_cmds()","register_plugin()","registered_cmds()","registered_plugins()","release_lock()","remove_missing_torrents()","remove_torrent()","remove_torrents()","retrieve_utorrent_settings()","rotate_logs()","run_test()","save()","select_torrent_hashes()","sendgetquery()","setdefaults()","setoutputmode()","set_ip()","set_job_properties()","set_port()","set_pwd()","set_user()","setupapp()","setupapp()","setupconfig()","setupdb()","srcdir()","srcdir=()","srcdir=()","srcfile()","srcfile=()","srcfile=()","startsession()","state()","state=()","state=()","stopsession()","storecookie()","test()","test2()","toggleoutputmode()","torrents_removed?()","unlockapp()","update()","update_cache()","update_lock()","update_torrent_state()","update_torrent_states()","update_torrents()","update_torrents_completed_processing()","ut_jobprops()","ut_list()","ut_names()","ut_settings()","ut_test_connection()","ut_torrent_details()","utorrent()","verbose=()","verbose=()","verbose=()","verbose=()","verbose=()","verbose=()","verbose=()","verifyuserinputs()","writecfg()","readme"],"longSearchIndex":["torrentprocessor","torrentprocessor::config","torrentprocessor::console","torrentprocessor::controller","torrentprocessor::database","torrentprocessor::formatter","torrentprocessor::plugin","torrentprocessor::plugin::cfgplugin","torrentprocessor::plugin::command","torrentprocessor::plugin::dbplugin","torrentprocessor::plugin::dbpluginbase","torrentprocessor::plugin::pluginmanager","torrentprocessor::plugin::tester","torrentprocessor::plugin::utplugin","torrentprocessor::processor","torrentprocessor::tpsetup","torrentprocessor::torrentdata","torrentprocessor::utorrentwebui","torrentprocessor::controller#add_filter()","torrentprocessor::processor#applocked?()","torrentprocessor::processor#apply_seed_limit_filters()","torrentprocessor::database#aquire_lock()","torrentprocessor::tpsetup#askuser()","torrentprocessor::database#buildbatchinsertquery()","torrentprocessor::database#buildbatchupdatequery()","torrentprocessor::database#buildcreatequery()","torrentprocessor::database#buildinsertorreplacequery()","torrentprocessor::database#buildupdatequery()","torrentprocessor::utorrentwebui#cache()","torrentprocessor::plugin::cfgplugin#cfg_addfilter()","torrentprocessor::plugin::cfgplugin#cfg_delfilter()","torrentprocessor::plugin::cfgplugin#cfg_ip()","torrentprocessor::plugin::cfgplugin#cfg_listfilters()","torrentprocessor::plugin::cfgplugin#cfg_port()","torrentprocessor::plugin::cfgplugin#cfg_pwd()","torrentprocessor::plugin::cfgplugin#cfg_setup()","torrentprocessor::plugin::cfgplugin#cfg_user()","torrentprocessor::controller#checksetupcompleted()","torrentprocessor::tpsetup#checksetupcompleted()","torrentprocessor::database#close()","torrentprocessor::plugin::pluginmanager::command()","torrentprocessor::plugin::pluginmanager::command_list()","torrentprocessor::tpsetup#configexists?()","torrentprocessor::console#configurecommands()","torrentprocessor::console#configureconfigcommands()","torrentprocessor::console#configureconsolecommands()","torrentprocessor::console#configuredbcommands()","torrentprocessor::console#configureutorrentcommands()","torrentprocessor::database#connect()","torrentprocessor::console#consoleheader()","torrentprocessor::console#consolehelp()","torrentprocessor::processor#copy_torrent()","torrentprocessor::database#create()","torrentprocessor::database#create_cache()","torrentprocessor::tpsetup#dbexists?()","torrentprocessor::console#dbinsert()","torrentprocessor::console#dbsetlock()","torrentprocessor::plugin::dbplugin#db_changestate()","torrentprocessor::plugin::dbplugin#db_close()","torrentprocessor::plugin::dbplugin#db_connect()","torrentprocessor::plugin::dbplugin#db_list_tables()","torrentprocessor::plugin::dbplugin#db_reconcile()","torrentprocessor::plugin::dbplugin#db_schema()","torrentprocessor::plugin::dbplugin#db_torrent_ratios()","torrentprocessor::plugin::dbplugin#db_torrent_states()","torrentprocessor::plugin::dbplugin#db_update()","torrentprocessor::database#delete_cache()","torrentprocessor::controller#delete_filter()","torrentprocessor::database#delete_torrent()","torrentprocessor::plugin::command#desc()","torrentprocessor::console#displaycommandlist()","torrentprocessor::plugin::utplugin#display_current_torrent_list()","torrentprocessor::plugin::utplugin#dump_jobprops()","torrentprocessor::plugin::pluginmanager#dump_plugins()","torrentprocessor::console#execute()","torrentprocessor::database#execute()","torrentprocessor::plugin::command#execute()","torrentprocessor::database#execute_batch()","torrentprocessor::database#exists_in_db?()","torrentprocessor::utorrentwebui#getquery()","torrentprocessor::utorrentwebui#gettoken()","torrentprocessor::processor#get_target_seed_ratio()","torrentprocessor::utorrentwebui#get_torrent_job_properties()","torrentprocessor::utorrentwebui#get_torrent_list()","torrentprocessor::utorrentwebui#get_torrent_list_using_cache()","torrentprocessor::utorrentwebui#get_utorrent_settings()","torrentprocessor::controller#interactivemode()","torrentprocessor::processor#interactivemode()","torrentprocessor::console#is_console_cmd?()","torrentprocessor::controller#label()","torrentprocessor::controller#label=()","torrentprocessor::processor#label=()","torrentprocessor::config#load()","torrentprocessor::processor#lockapp()","torrentprocessor::controller#log()","torrentprocessor::logo()","torrentprocessor::controller#msg()","torrentprocessor::controller#msg=()","torrentprocessor::processor#msg=()","torrentprocessor::config::new()","torrentprocessor::console::new()","torrentprocessor::controller::new()","torrentprocessor::database::new()","torrentprocessor::plugin::command::new()","torrentprocessor::plugin::dbpluginbase::new()","torrentprocessor::processor::new()","torrentprocessor::tpsetup::new()","torrentprocessor::torrentdata::new()","torrentprocessor::utorrentwebui::new()","torrentprocessor::controller#nocmdlinearg()","torrentprocessor::formatter::outputmode()","torrentprocessor::formatter::pheader()","torrentprocessor::formatter::phr()","torrentprocessor::formatter::pqueryresults()","torrentprocessor::utorrentwebui#parselistrequestresponse()","torrentprocessor::utorrentwebui#parseresponse()","torrentprocessor::utorrentwebui#parsetorrentlistcacheresponse()","torrentprocessor::utorrentwebui#parsetorrentlistresponse()","torrentprocessor::controller#prevstate()","torrentprocessor::controller#prevstate=()","torrentprocessor::processor#prevstate=()","torrentprocessor::tpsetup#printheader()","torrentprocessor::controller#process()","torrentprocessor::processor#process()","torrentprocessor::console#processcmd()","torrentprocessor::controller#processcmdlineargs()","torrentprocessor::console#processconsolecmd()","torrentprocessor::console#processdbcmd()","torrentprocessor::processor#process_torrents_awaiting_processing()","torrentprocessor::processor#process_torrents_completed_seeding()","torrentprocessor::processor#quote()","torrentprocessor::database#read_cache()","torrentprocessor::database#read_lock()","torrentprocessor::database#read_torrent_state()","torrentprocessor::plugin::cfgplugin::register_cmds()","torrentprocessor::plugin::dbplugin::register_cmds()","torrentprocessor::plugin::dbpluginbase::register_cmds()","torrentprocessor::plugin::pluginmanager::register_cmds()","torrentprocessor::plugin::utplugin::register_cmds()","torrentprocessor::plugin::pluginmanager::register_plugin()","torrentprocessor::plugin::pluginmanager::registered_cmds()","torrentprocessor::plugin::pluginmanager::registered_plugins()","torrentprocessor::database#release_lock()","torrentprocessor::processor#remove_missing_torrents()","torrentprocessor::utorrentwebui#remove_torrent()","torrentprocessor::processor#remove_torrents()","torrentprocessor::processor#retrieve_utorrent_settings()","torrentprocessor::controller#rotate_logs()","torrentprocessor::plugin::tester#run_test()","torrentprocessor::config#save()","torrentprocessor::plugin::utplugin#select_torrent_hashes()","torrentprocessor::utorrentwebui#sendgetquery()","torrentprocessor::config#setdefaults()","torrentprocessor::formatter::setoutputmode()","torrentprocessor::controller#set_ip()","torrentprocessor::utorrentwebui#set_job_properties()","torrentprocessor::controller#set_port()","torrentprocessor::controller#set_pwd()","torrentprocessor::controller#set_user()","torrentprocessor::controller#setupapp()","torrentprocessor::tpsetup#setupapp()","torrentprocessor::tpsetup#setupconfig()","torrentprocessor::tpsetup#setupdb()","torrentprocessor::controller#srcdir()","torrentprocessor::controller#srcdir=()","torrentprocessor::processor#srcdir=()","torrentprocessor::controller#srcfile()","torrentprocessor::controller#srcfile=()","torrentprocessor::processor#srcfile=()","torrentprocessor::utorrentwebui#startsession()","torrentprocessor::controller#state()","torrentprocessor::controller#state=()","torrentprocessor::processor#state=()","torrentprocessor::utorrentwebui#stopsession()","torrentprocessor::utorrentwebui#storecookie()","torrentprocessor::plugin::dbpluginbase#test()","torrentprocessor::plugin::dbpluginbase#test2()","torrentprocessor::formatter::toggleoutputmode()","torrentprocessor::utorrentwebui#torrents_removed?()","torrentprocessor::processor#unlockapp()","torrentprocessor::database#update()","torrentprocessor::database#update_cache()","torrentprocessor::database#update_lock()","torrentprocessor::database#update_torrent_state()","torrentprocessor::processor#update_torrent_states()","torrentprocessor::database#update_torrents()","torrentprocessor::processor#update_torrents_completed_processing()","torrentprocessor::plugin::utplugin#ut_jobprops()","torrentprocessor::plugin::utplugin#ut_list()","torrentprocessor::plugin::utplugin#ut_names()","torrentprocessor::plugin::utplugin#ut_settings()","torrentprocessor::plugin::utplugin#ut_test_connection()","torrentprocessor::plugin::utplugin#ut_torrent_details()","torrentprocessor::processor#utorrent()","torrentprocessor::console#verbose=()","torrentprocessor::controller#verbose=()","torrentprocessor::database#verbose=()","torrentprocessor::processor#verbose=()","torrentprocessor::tpsetup#verbose=()","torrentprocessor::torrentdata#verbose=()","torrentprocessor::utorrentwebui#verbose=()","torrentprocessor::tpsetup#verifyuserinputs()","torrentprocessor::controller#writecfg()",""],"info":[["TorrentProcessor","","TorrentProcessor.html","","<p>TorrentProcessor module\n<p>TorrentProcessor module\n<p>TorrentProcessor module\n"],["TorrentProcessor::Config","","TorrentProcessor/Config.html","","<p>Config class\n"],["TorrentProcessor::Console","","TorrentProcessor/Console.html","","<p>Interactive Console class\n"],["TorrentProcessor::Controller","","TorrentProcessor/Controller.html","","<p>Controller class\n"],["TorrentProcessor::Database","","TorrentProcessor/Database.html","","<p>Database class\n"],["TorrentProcessor::Formatter","","TorrentProcessor/Formatter.html","","<p>Formatter class\n"],["TorrentProcessor::Plugin","","TorrentProcessor/Plugin.html","","<p>Plugin module\n<p>Plugin module\n<p>Plugin module\n"],["TorrentProcessor::Plugin::CfgPlugin","","TorrentProcessor/Plugin/CfgPlugin.html","","<p>CfgPlugin class\n"],["TorrentProcessor::Plugin::Command","","TorrentProcessor/Plugin/Command.html","","<p>Command class\n<p>Object used to encapsulate a command, the method that should be called \nwhen the command ...\n"],["TorrentProcessor::Plugin::DBPlugin","","TorrentProcessor/Plugin/DBPlugin.html","","<p>DBPlugin class\n"],["TorrentProcessor::Plugin::DBPluginBase","","TorrentProcessor/Plugin/DBPluginBase.html","","<p>DBPluginBase class\n"],["TorrentProcessor::Plugin::PluginManager","","TorrentProcessor/Plugin/PluginManager.html","","<p>PluginManager class\n"],["TorrentProcessor::Plugin::Tester","","TorrentProcessor/Plugin/Tester.html","","<p>Tester class\n"],["TorrentProcessor::Plugin::UTPlugin","","TorrentProcessor/Plugin/UTPlugin.html","","<p>UTPlugin class\n"],["TorrentProcessor::Processor","","TorrentProcessor/Processor.html","","<p>Processor class\n"],["TorrentProcessor::TPSetup","","TorrentProcessor/TPSetup.html","","<p>TPSetup class\n"],["TorrentProcessor::TorrentData","","TorrentProcessor/TorrentData.html","","<p>TorrentData class\n"],["TorrentProcessor::UTorrentWebUI","","TorrentProcessor/UTorrentWebUI.html","","<p>UTorrentWebUI class\n"],["add_filter","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-add_filter","(tracker, seedlimit)","<p>Add a tracker seedlimit filter to the config file\n"],["appLocked?","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-appLocked-3F","()","<p>Test if app is locked\n"],["apply_seed_limit_filters","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-apply_seed_limit_filters","()","<p>Apply seed limit filters to new torrents. Torrents are considered 'new' if\nthey don't have a state ( ...\n"],["aquire_lock","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-aquire_lock","()","<p>Aquire lock\n"],["askUser","TorrentProcessor::TPSetup","TorrentProcessor/TPSetup.html#method-i-askUser","(questions)","<p>Get data from the user.\n<p>questions &mdash; array of questions.\n<p>returns &mdash; array of user's answers. Index of answer ...\n"],["buildBatchInsertQuery","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-buildBatchInsertQuery","( torrents )","<p>Build a batch INSERT query using torrent data from a Hash object\n<p>torrents &mdash; Hash of TorrentData objects ...\n\n"],["buildBatchUpdateQuery","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-buildBatchUpdateQuery","( torrents )","<p>Build a batch UPDATE query using torrent data from a Hash object\n<p>torrents &mdash; Hash of TorrentData objects ...\n\n"],["buildCreateQuery","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-buildCreateQuery","( tdata )","<p>Build a CREATE query using data from a TorrentData object\n<p>tdata &mdash; TorrentData object\n\n"],["buildInsertOrReplaceQuery","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-buildInsertOrReplaceQuery","( tdata )","<p>Build an INSERT OR REPLACE query using data from a TorrentData object\n<p>tdata &mdash; TorrentData object\n\n"],["buildUpdateQuery","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-buildUpdateQuery","( tdata )","<p>Build an UPDATE query using data from a TorrentData object\n<p>tdata &mdash; TorrentData object\n\n"],["cache","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-cache","()","<p>Return the cache token\n"],["cfg_addfilter","TorrentProcessor::Plugin::CfgPlugin","TorrentProcessor/Plugin/CfgPlugin.html#method-i-cfg_addfilter","(args)","<p>Add a tracker seed filter\n"],["cfg_delfilter","TorrentProcessor::Plugin::CfgPlugin","TorrentProcessor/Plugin/CfgPlugin.html#method-i-cfg_delfilter","(args)","<p>Delete a tracker seed filter\n"],["cfg_ip","TorrentProcessor::Plugin::CfgPlugin","TorrentProcessor/Plugin/CfgPlugin.html#method-i-cfg_ip","(args)","<p>Configure uTorrent IP address\n"],["cfg_listfilters","TorrentProcessor::Plugin::CfgPlugin","TorrentProcessor/Plugin/CfgPlugin.html#method-i-cfg_listfilters","(args)","<p>List all tracker seed filters\n"],["cfg_port","TorrentProcessor::Plugin::CfgPlugin","TorrentProcessor/Plugin/CfgPlugin.html#method-i-cfg_port","(args)","<p>Configure uTorrent Port\n"],["cfg_pwd","TorrentProcessor::Plugin::CfgPlugin","TorrentProcessor/Plugin/CfgPlugin.html#method-i-cfg_pwd","(args)","<p>Configure uTorrent password\n"],["cfg_setup","TorrentProcessor::Plugin::CfgPlugin","TorrentProcessor/Plugin/CfgPlugin.html#method-i-cfg_setup","(args)","<p>Run TorrentProcessor setup\n"],["cfg_user","TorrentProcessor::Plugin::CfgPlugin","TorrentProcessor/Plugin/CfgPlugin.html#method-i-cfg_user","(args)","<p>Configure uTorrent user\n"],["checkSetupCompleted","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-checkSetupCompleted","()","<p>Check to make sure the user has setup the application\n"],["checkSetupCompleted","TorrentProcessor::TPSetup","TorrentProcessor/TPSetup.html#method-i-checkSetupCompleted","()","<p>Check if setup has been completed.\n<p>returns &mdash; false if setup is not yet completed\n\n"],["close","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-close","()","<p>Close the Database connection\n"],["command","TorrentProcessor::Plugin::PluginManager","TorrentProcessor/Plugin/PluginManager.html#method-c-command","(cmdname, *args)","<p>Call a plugin's command, passing it a set of arguments.\n<p><strong>Args</strong>\n<p><code>cmdname</code> -- the command to be called, defined ...\n"],["command_list","TorrentProcessor::Plugin::PluginManager","TorrentProcessor/Plugin/PluginManager.html#method-c-command_list","(plugin_type)","<p>Returns an array of arrays containing the plugin command and a desciption.\nThe command and description ...\n"],["configExists?","TorrentProcessor::TPSetup","TorrentProcessor/TPSetup.html#method-i-configExists-3F","()","<p>Check if config file exists\n<p>returns &mdash; false if setup is not yet completed\n\n"],["configureCommands","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-configureCommands","()","<p>Configure commands\n"],["configureConfigCommands","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-configureConfigCommands","()","<p>Configure TorrentProcessor Configuration specific commands\n"],["configureConsoleCommands","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-configureConsoleCommands","()","<p>Configure console specific commands\n"],["configureDbCommands","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-configureDbCommands","()","<p>Configure DB specific commands\n"],["configureUTorrentCommands","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-configureUTorrentCommands","()","<p>Configure uTorrent specific commands\n"],["connect","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-connect","()","<p>Connect to TP Database\n"],["consoleHeader","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-consoleHeader","()","<p>Console header\n"],["consoleHelp","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-consoleHelp","()","<p>Console help\n"],["copy_torrent","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-copy_torrent","( hash, fname, fdir, lbl)","<p>Copy torrent files to a specific location\n"],["create","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-create","(tdata)","<p>Create a torrent in the database\n<p>torrent &mdash; Torrent Data to update\n\n"],["create_cache","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-create_cache","(cache_id)","<p>Create the cache id\n<p>cache_id\n"],["dbExists?","TorrentProcessor::TPSetup","TorrentProcessor/TPSetup.html#method-i-dbExists-3F","()","<p>Check if DB file exists\n<p>returns &mdash; false if DB doesn't exist\n\n"],["dbInsert","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-dbInsert","()","<p>Insert torrents into DB with data from torrents list\n"],["dbSetLock","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-dbSetLock","()","<p>Set application lock value\n"],["db_changestate","TorrentProcessor::Plugin::DBPlugin","TorrentProcessor/Plugin/DBPlugin.html#method-i-db_changestate","(args)","<p>Update a torrent's state\n"],["db_close","TorrentProcessor::Plugin::DBPlugin","TorrentProcessor/Plugin/DBPlugin.html#method-i-db_close","(args)","<p>Close the DB connection\n"],["db_connect","TorrentProcessor::Plugin::DBPlugin","TorrentProcessor/Plugin/DBPlugin.html#method-i-db_connect","(args)","<p>Open a connection to the DB\n"],["db_list_tables","TorrentProcessor::Plugin::DBPlugin","TorrentProcessor/Plugin/DBPlugin.html#method-i-db_list_tables","(args)","<p>Display a list of tables within the DB\n"],["db_reconcile","TorrentProcessor::Plugin::DBPlugin","TorrentProcessor/Plugin/DBPlugin.html#method-i-db_reconcile","(args)","<p>Reconcile the DB with uTorrent current state\n"],["db_schema","TorrentProcessor::Plugin::DBPlugin","TorrentProcessor/Plugin/DBPlugin.html#method-i-db_schema","(args)","<p>Display the DB schema\n"],["db_torrent_ratios","TorrentProcessor::Plugin::DBPlugin","TorrentProcessor/Plugin/DBPlugin.html#method-i-db_torrent_ratios","(args)","<p>Display the current torrent ratios within the DB\n"],["db_torrent_states","TorrentProcessor::Plugin::DBPlugin","TorrentProcessor/Plugin/DBPlugin.html#method-i-db_torrent_states","(args)","<p>Display the current state of torrents in the DB\n"],["db_update","TorrentProcessor::Plugin::DBPlugin","TorrentProcessor/Plugin/DBPlugin.html#method-i-db_update","(args)","<p>Clear all torrent data from the DB and refresh with new data from uTorrent.\n"],["delete_cache","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-delete_cache","()","<p>Delete the cache id\n"],["delete_filter","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-delete_filter","(tracker)","<p>Remove a tracker seedlimit filter from the config file\n"],["delete_torrent","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-delete_torrent","(hash)","<p>Remove a torrent from the database\n<p>hash &mdash; Torrent hash to be removed\n\n"],["desc","TorrentProcessor::Plugin::Command","TorrentProcessor/Plugin/Command.html#method-i-desc","()","<p>Return the command's description\n"],["displayCommandList","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-displayCommandList","( hdr, cmds )","<p>Display a set of commands\n"],["display_current_torrent_list","TorrentProcessor::Plugin::UTPlugin","TorrentProcessor/Plugin/UTPlugin.html#method-i-display_current_torrent_list","( tdata )","<p>Display and return an indexed hash of the current torrents\n<p>@returns hash of arrays containing torrent ...\n"],["dump_jobprops","TorrentProcessor::Plugin::UTPlugin","TorrentProcessor/Plugin/UTPlugin.html#method-i-dump_jobprops","( ut, hashes )","<p>Display torrent job property data\n"],["dump_plugins","TorrentProcessor::Plugin::PluginManager","TorrentProcessor/Plugin/PluginManager.html#method-i-dump_plugins","()",""],["execute","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-execute","()","<p>Execute the console\n"],["execute","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-execute","(query)","<p>Execute a query against the DB\n"],["execute","TorrentProcessor::Plugin::Command","TorrentProcessor/Plugin/Command.html#method-i-execute","(*args)","<p>Execute the command passing it any args provided.\n<p><strong>Args</strong>\n<p><code>args</code> -- argument list to be passed to the command ...\n"],["execute_batch","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-execute_batch","(query)","<p>Execute a batch query against the DB\n"],["exists_in_db?","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-exists_in_db-3F","(hash)","<p>Return true if torrent hash exists in DB\n<p>returns &mdash; true/false\n\n"],["getQuery","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-getQuery","(query)","<p>Send a GET query\n<p>returns &mdash; response body\n\n"],["getToken","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-getToken","()","<p>Get the uTorrent token for queries\n<p>returns &mdash; token\n\n"],["get_target_seed_ratio","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-get_target_seed_ratio","(name, hash)","<p>Determine the target seed ratio for a torrent.\n"],["get_torrent_job_properties","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-get_torrent_job_properties","(hash)","<p>Get a torrent's job properties\n"],["get_torrent_list","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-get_torrent_list","(cache_id = nil)","<p>Get a list of Torrents\n"],["get_torrent_list_using_cache","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-get_torrent_list_using_cache","(cache_id)","<p>Get a list of Torrents using a cache value\n"],["get_utorrent_settings","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-get_utorrent_settings","()","<p>Get uTorrent settings\n"],["interactiveMode","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-interactiveMode","()","<p>Run Torrent Processor in interactive mode\n"],["interactiveMode","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-interactiveMode","()","<p>Run interactive console\n"],["is_console_cmd?","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-is_console_cmd-3F","(cmd)","<p>Return true if given cmd is in console_cmds\n<p>cmd &mdash; commands to test for\n\n"],["label","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-label","(labelval)","<p>Set the torrent's label. The value is actually maintained/stored in the\nmodel.\n<p>labelval &mdash; label value from ...\n"],["label=","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-label-3D","(labelval)","<p>Assignment operator for setting the uTorrent label.\n<p>labelval &mdash; label value from uTorrent\n<p>returns &mdash; previous ...\n"],["label=","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-label-3D","(labelval)","<p>Set the uTorrent label\n<p>labelval &mdash; uTorrent label\n\n"],["load","TorrentProcessor::Config","TorrentProcessor/Config.html#method-i-load","()","<p>Load the YAML configuration file.\n<p>returns &mdash; a hash containing configuration info.\n\n"],["lockApp","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-lockApp","()","<p>Set application lock flag\n"],["log","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-log","(msg)","<p>Write message to torrentprocessor log\n"],["logo","TorrentProcessor","TorrentProcessor.html#method-c-logo","()",""],["msg","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-msg","(msgval)","<p>Set the torrent's msg. The value is actually maintained/stored in the\nmodel.\n<p>msgval &mdash; msg value from uTorrent ...\n"],["msg=","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-msg-3D","(msgval)","<p>Assignment operator for setting the uTorrent msg.\n<p>msgval &mdash; msg value from uTorrent\n<p>returns &mdash; previous msg value ...\n"],["msg=","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-msg-3D","(msgval)","<p>Set the uTorrent msg\n<p>msgval &mdash; uTorrent msg\n\n"],["new","TorrentProcessor::Config","TorrentProcessor/Config.html#method-c-new","(rootDir=nil)","<p>Config class constructor\n"],["new","TorrentProcessor::Console","TorrentProcessor/Console.html#method-c-new","(controller)","<p>Console constructor\n"],["new","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-c-new","()","<p>Constructor\n"],["new","TorrentProcessor::Database","TorrentProcessor/Database.html#method-c-new","(controller)","<p>Database constructor\n<p>controller &mdash; controller object\n\n"],["new","TorrentProcessor::Plugin::Command","TorrentProcessor/Plugin/Command.html#method-c-new","(klass, mthd, desc)","<p><strong>Args</strong>\n<p><code>klass</code> -- class constant (ie. Test) used to instanciate the\nobject\n<p><code>mthd</code> -- method symbol to call (ie. ...\n"],["new","TorrentProcessor::Plugin::DBPluginBase","TorrentProcessor/Plugin/DBPluginBase.html#method-c-new","()",""],["new","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-c-new","(controller)","<p>Processor constructor\n"],["new","TorrentProcessor::TPSetup","TorrentProcessor/TPSetup.html#method-c-new","(controller)","<p>TPSetup constructor\n<p>controller &mdash; controller object\n\n"],["new","TorrentProcessor::TorrentData","TorrentProcessor/TorrentData.html#method-c-new","(torrent)","<p>TorrentData constructor\n<p>torrent &mdash; Array of torrent data\n\n"],["new","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-c-new","(ip, port, user, pass)","<p>Processor constructor\n"],["noCmdLineArg","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-noCmdLineArg","()","<p>User supplied no command line arguments. <strong><em>Note:</strong>\nSwitches and options are not considered command line arguments.</em> ...\n"],["outputMode","TorrentProcessor::Formatter","TorrentProcessor/Formatter.html#method-c-outputMode","()","<p>Return current output mode\n"],["pHeader","TorrentProcessor::Formatter","TorrentProcessor/Formatter.html#method-c-pHeader","(hdr)","<p>Output a pretty header\n<p>hdr &mdash; Header text\n\n"],["pHr","TorrentProcessor::Formatter","TorrentProcessor/Formatter.html#method-c-pHr","()","<p>Output a simple horizonal rule\n"],["pQueryResults","TorrentProcessor::Formatter","TorrentProcessor/Formatter.html#method-c-pQueryResults","(results)","<p>Output a DB query\n<p>results &mdash; DB query results\n\n"],["parseListRequestResponse","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-parseListRequestResponse","(response)","<p>Parse a response result from a torrent list request\n<p>response &mdash; the JSON parsed reponse\n\n"],["parseResponse","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-parseResponse","()","<p>Parse the response data (using JSON)\n"],["parseTorrentListCacheResponse","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-parseTorrentListCacheResponse","(response)","<p>Parse a response result from a torrent list cache request\n<p>response &mdash; the JSON parsed reponse\n\n"],["parseTorrentListResponse","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-parseTorrentListResponse","(response)","<p>Parse a response result from a torrent list request\n<p>response &mdash; the JSON parsed reponse\n\n"],["prevstate","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-prevstate","(stateval)","<p>Set the torrent's prevstate. The value is actually maintained/stored in the\nmodel.\n<p>stateval &mdash; previous torrent ...\n"],["prevstate=","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-prevstate-3D","(stateval)","<p>Assignment operator for setting the previous state.\n<p>stateval &mdash; previous torrent state\n<p>returns &mdash; previous 'previous' ...\n"],["prevstate=","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-prevstate-3D","(stateval)","<p>Set the previous state\n<p>stateval &mdash; previous torrent state\n\n"],["printHeader","TorrentProcessor::TPSetup","TorrentProcessor/TPSetup.html#method-i-printHeader","(hdr)","<p>Print a header to STDOUT. Header is surrounded with lines.\n<p>hdr &mdash; header to print\n\n"],["process","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-process","()","<p>TODO: write process() description\n"],["process","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-process","()","<p>TODO: write process() description\n"],["processCmd","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-processCmd","(cmd)","<p>Process a command\n<p>cmd &mdash; cmd to process\n<p>returns &mdash; true if command processed\n"],["processCmdLineArgs","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-processCmdLineArgs","(arg)","<p>User supplied a command line argument(s).  <strong><em>Note:</strong> that\nswitches and options are not considered command</em> ...\n"],["processConsoleCmd","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-processConsoleCmd","(cmd)","<p>Process a console command\n<p>cmd &mdash; cmd to process\n<p>returns &mdash; true if command processed\n"],["processDbCmd","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-processDbCmd","(cmd)","<p>Process a DB command\n<p>cmd &mdash; cmd to process\n<p>returns &mdash; true if command processed\n"],["process_torrents_awaiting_processing","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-process_torrents_awaiting_processing","()","<p>Process torrents that are awaiting processing\n"],["process_torrents_completed_seeding","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-process_torrents_completed_seeding","()","<p>Process torrents that have completed seeding\n"],["quote","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-quote","(str)","<p>Quote a string\n<p>str &mdash; String to apply quotes to\n\n"],["read_cache","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-read_cache","()","<p>Read the cache id\n<p>returns &mdash; cache_id\n\n"],["read_lock","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-read_lock","()","<p>Read the application lock value\n<p>returns &mdash; Y or N\n\n"],["read_torrent_state","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-read_torrent_state","(hash)","<p>Read a torrent's state\n<p>returns &mdash; state\n\n"],["register_cmds","TorrentProcessor::Plugin::CfgPlugin","TorrentProcessor/Plugin/CfgPlugin.html#method-c-register_cmds","()",""],["register_cmds","TorrentProcessor::Plugin::DBPlugin","TorrentProcessor/Plugin/DBPlugin.html#method-c-register_cmds","()",""],["register_cmds","TorrentProcessor::Plugin::DBPluginBase","TorrentProcessor/Plugin/DBPluginBase.html#method-c-register_cmds","()",""],["register_cmds","TorrentProcessor::Plugin::PluginManager","TorrentProcessor/Plugin/PluginManager.html#method-c-register_cmds","(plugin_type, plug_klass)","<p>Register a plugin's commands. After the plugin has been added to the \n@registered_plugins hash, the plugin's ...\n"],["register_cmds","TorrentProcessor::Plugin::UTPlugin","TorrentProcessor/Plugin/UTPlugin.html#method-c-register_cmds","()",""],["register_plugin","TorrentProcessor::Plugin::PluginManager","TorrentProcessor/Plugin/PluginManager.html#method-c-register_plugin","(plugin_type, plug_klass)","<p>Register a plugin. After the plugin has been added to the \n@registered_plugins hash, the plugin's register_cmds ...\n"],["registered_cmds","TorrentProcessor::Plugin::PluginManager","TorrentProcessor/Plugin/PluginManager.html#method-c-registered_cmds","()","<p>Return a hash of registered commands\n"],["registered_plugins","TorrentProcessor::Plugin::PluginManager","TorrentProcessor/Plugin/PluginManager.html#method-c-registered_plugins","()","<p>Return a hash of registered plugins\n"],["release_lock","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-release_lock","()","<p>Release lock\n"],["remove_missing_torrents","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-remove_missing_torrents","(torrents)","<p>Remove torrents from DB that have been removed from utorrent\n<p>torrents &mdash; current list of torrents passed ...\n\n"],["remove_torrent","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-remove_torrent","(hash)","<p>Send uTorrent request to remove torrent\n"],["remove_torrents","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-remove_torrents","(torrents)","<p>Remove torrents from DB that have been removed from utorrent\n<p>torrents &mdash; torrents that have been removed ...\n\n"],["retrieve_utorrent_settings","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-retrieve_utorrent_settings","()","<p>Retrieve the current uTorrent settings. seed_ratio in particular.\n"],["rotate_logs","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-rotate_logs","()","<p>Rotate torrentprocessor logs\n"],["run_test","TorrentProcessor::Plugin::Tester","TorrentProcessor/Plugin/Tester.html#method-i-run_test","()",""],["save","TorrentProcessor::Config","TorrentProcessor/Config.html#method-i-save","()","<p>Save the @cfg hash to a YAML file.\n"],["select_torrent_hashes","TorrentProcessor::Plugin::UTPlugin","TorrentProcessor/Plugin/UTPlugin.html#method-i-select_torrent_hashes","( tdata )","<p>Return an array containing torrent hashes and names. The data is selected\nby the user via index\n"],["sendGetQuery","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-sendGetQuery","(query)","<p>Send a GET query\n<p>query &mdash; Query to send\n\n"],["setDefaults","TorrentProcessor::Config","TorrentProcessor/Config.html#method-i-setDefaults","()","<p>Set default config values\n"],["setOutputMode","TorrentProcessor::Formatter","TorrentProcessor/Formatter.html#method-c-setOutputMode","(mode)","<p>Set output mode\n"],["set_ip","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-set_ip","(ip)","<p>Set the uTorrent IP address\n"],["set_job_properties","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-set_job_properties","(props)","<p>Set torrent job properties\n<p>props: hash of hashes\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Expected</span> <span class=\"ruby-identifier\">format</span><span class=\"ruby-operator\">:</span>\n  {<span class=\"ruby-identifier\">hash1</span> =<span class=\"ruby-operator\">&gt;</span> {<span class=\"ruby-string\">'prop1'</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'value1'</span>, <span class=\"ruby-string\">'prop2'</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_port","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-set_port","(port)","<p>Set the uTorrent Port number\n"],["set_pwd","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-set_pwd","(pwd)","<p>Set the uTorrent WebUI password\n"],["set_user","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-set_user","(user)","<p>Set the uTorrent WebUI username\n"],["setupApp","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-setupApp","()","<p>Setup the application\n"],["setupApp","TorrentProcessor::TPSetup","TorrentProcessor/TPSetup.html#method-i-setupApp","()","<p>Setup application\n"],["setupConfig","TorrentProcessor::TPSetup","TorrentProcessor/TPSetup.html#method-i-setupConfig","()","<p>Setup the config file by building a list of questions, display them to the\nuser and collecting the answers. ...\n"],["setupDb","TorrentProcessor::TPSetup","TorrentProcessor/TPSetup.html#method-i-setupDb","()","<p>Setup the DB file by creating the DB and tables.\n"],["srcdir","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-srcdir","(srcdirpath)","<p>Set the srcdir. The value is actually maintained/stored in the model.\n<p>srcdirpath &mdash; input file directory ...\n"],["srcdir=","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-srcdir-3D","(srcdirpath)","<p>Assignment operator for setting the srcdir.\n<p>srcdirpath &mdash; input file directory path\n<p>returns &mdash; previous srcdir ...\n"],["srcdir=","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-srcdir-3D","(srcdirpath)","<p>Set the srcdir\n<p>srcdirpath &mdash; input file path\n\n"],["srcfile","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-srcfile","(srcfilepath)","<p>Set the srcfile. The value is actually maintained/stored in the model.\n<p>srcfilepath &mdash; source file path\n<p>returns ... &mdash; "],["srcfile=","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-srcfile-3D","(srcfilepath)","<p>Assignment operator for setting the srcfile.\n<p>srcfilepath &mdash; source file path\n<p>returns &mdash; previous srcfile\n"],["srcfile=","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-srcfile-3D","(srcfilepath)","<p>Set the srcfile\n<p>srcfilepath &mdash; input file path\n\n"],["startSession","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-startSession","()","<p>Start a HTTP session\n<p>returns &mdash; HTTP object\n\n"],["state","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-state","(stateval)","<p>Set the torrent state. The value is actually maintained/stored in the\nmodel.\n<p>state &mdash; current torrent state ...\n"],["state=","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-state-3D","(stateval)","<p>Assignment operator for setting the state.\n<p>state &mdash; current torrent state\n<p>returns &mdash; previous 'current' torrent ...\n"],["state=","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-state-3D","(stateval)","<p>Set the current state\n<p>state &mdash; current torrent state\n\n"],["stopSession","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-stopSession","()","<p>Stop a HTTP session\n"],["storeCookie","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-storeCookie","()","<p>Store the cookie if sent\n"],["test","TorrentProcessor::Plugin::DBPluginBase","TorrentProcessor/Plugin/DBPluginBase.html#method-i-test","(args)",""],["test2","TorrentProcessor::Plugin::DBPluginBase","TorrentProcessor/Plugin/DBPluginBase.html#method-i-test2","(args)",""],["toggleOutputMode","TorrentProcessor::Formatter","TorrentProcessor/Formatter.html#method-c-toggleOutputMode","()","<p>Toggle the output mode\n"],["torrents_removed?","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-torrents_removed-3F","()","<p>Indicates if there are torrents that have been removed.\n<p>returns &mdash; none\n\n"],["unlockApp","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-unlockApp","()","<p>UnSet application lock flag\n"],["update","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-update","(tdata)","<p>Update a torrent in the database\n<p>torrent &mdash; Torrent Data to update\n\n"],["update_cache","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-update_cache","(cache_id)","<p>Update the cache id\n<p>cache_id\n"],["update_lock","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-update_lock","(applock)","<p>Update the application lock value\n<p>applock &mdash; Y or N\n\n"],["update_torrent_state","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-update_torrent_state","(hash, state)","<p>Update a torrents state database\n<p>hash &mdash; Hash of Torrent\n<p>state &mdash; state of Torrent\n"],["update_torrent_states","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-update_torrent_states","()","<p>Update torrent states within the DB\n"],["update_torrents","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-update_torrents","(torrents)","<p>Update a hash of torrents in the database\n<p>torrents &mdash; Hash of Torrent Data to update\n\n"],["update_torrents_completed_processing","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-update_torrents_completed_processing","()","<p>Process torrents that have completed processing\n"],["ut_jobprops","TorrentProcessor::Plugin::UTPlugin","TorrentProcessor/Plugin/UTPlugin.html#method-i-ut_jobprops","(args)",""],["ut_list","TorrentProcessor::Plugin::UTPlugin","TorrentProcessor/Plugin/UTPlugin.html#method-i-ut_list","(args)",""],["ut_names","TorrentProcessor::Plugin::UTPlugin","TorrentProcessor/Plugin/UTPlugin.html#method-i-ut_names","(args)",""],["ut_settings","TorrentProcessor::Plugin::UTPlugin","TorrentProcessor/Plugin/UTPlugin.html#method-i-ut_settings","(args)",""],["ut_test_connection","TorrentProcessor::Plugin::UTPlugin","TorrentProcessor/Plugin/UTPlugin.html#method-i-ut_test_connection","(args)","<p>Test the webui connection\n"],["ut_torrent_details","TorrentProcessor::Plugin::UTPlugin","TorrentProcessor/Plugin/UTPlugin.html#method-i-ut_torrent_details","(args)","<p>Display torrent details\n"],["utorrent","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-utorrent","()","<p>Return a utorrent instance\n"],["verbose=","TorrentProcessor::Console","TorrentProcessor/Console.html#method-i-verbose-3D","(arg)","<p>Set the verbose flag\n<p>arg &mdash; verbose mode if true\n\n"],["verbose=","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-verbose-3D","(arg)","<p>Assignment operator for setting the verbose flag.\n<p>arg &mdash; True = verbose on\n\n"],["verbose=","TorrentProcessor::Database","TorrentProcessor/Database.html#method-i-verbose-3D","(arg)","<p>Set the verbose flag\n<p>arg &mdash; verbose mode if true\n\n"],["verbose=","TorrentProcessor::Processor","TorrentProcessor/Processor.html#method-i-verbose-3D","(arg)","<p>Set the verbose flag\n<p>arg &mdash; verbose mode if true\n\n"],["verbose=","TorrentProcessor::TPSetup","TorrentProcessor/TPSetup.html#method-i-verbose-3D","(arg)","<p>Set the verbose flag\n<p>arg &mdash; verbose mode if true\n\n"],["verbose=","TorrentProcessor::TorrentData","TorrentProcessor/TorrentData.html#method-i-verbose-3D","(arg)","<p>Set the verbose flag\n<p>arg &mdash; verbose mode if true\n\n"],["verbose=","TorrentProcessor::UTorrentWebUI","TorrentProcessor/UTorrentWebUI.html#method-i-verbose-3D","(arg)","<p>Set the verbose flag\n<p>arg &mdash; verbose mode if true\n\n"],["verifyUserInputs","TorrentProcessor::TPSetup","TorrentProcessor/TPSetup.html#method-i-verifyUserInputs","(questions, answers)","<p>verifyUserInputs should be called after getting user input.Asks the user if\nthey are happy with the values ...\n"],["writeCfg","TorrentProcessor::Controller","TorrentProcessor/Controller.html#method-i-writeCfg","()","<p>Write the default config file to disk\n"],["README","","docs/README_rdoc.html","","<p>TorrentProcessor Overview\n<p>Generated: 07/31/2011\n<p>Copyright (c) 2011, kTech Systems LLC. All rights reserved. ...\n"]]}}