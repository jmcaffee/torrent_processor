#! C:/tools/Ruby/bin/ruby.exe
##############################################################################
# File::    torrentprocessor.rb
# Purpose:: Utility to ...
#
# Author::    Jeff McAffee 07/31/2011
# Copyright:: Copyright (c) 2011, kTech Systems LLC. All rights reserved.
# Website::   http://ktechsystems.com
##############################################################################

require 'torrentprocessor'
require 'user-choices'


class TorrentProcessorApp < UserChoices::Command
  include UserChoices
  include TorrentProcessor


  def initialize()
    super
    @controller = Controller.new
  end


  def add_sources(builder)
    builder.add_source(CommandLineSource, :usage,
      "Usage: #{$0} [options]", # SRCDIR FILENAME STATE PREVSTATE MSG LABEL",
      "TorrentProcessor will process torrent downloads throughout the torrent DL lifecycle.\n")
  end # def add_sources


  def add_choices(builder)
    # Arguments
    #builder.add_choice(:cmdArg, :length=>1) { |command_line|   # Use length to REQUIRE args.
    builder.add_choice(:cmdArg) { |command_line|
      command_line.uses_arglist
    }

    # Switches
    builder.add_choice(:version, :type=>:boolean, :default=>false) { |command_line|
      command_line.uses_switch("--version", "Show application version.")
    }

    builder.add_choice(:init, :type=>:boolean, :default=>false) { |command_line|
      command_line.uses_switch("--init",
                              "Configure Torrent Processor application.")
    }

    builder.add_choice(:interactive, :type=>:boolean, :default=>false) { |command_line|
      command_line.uses_switch("-i", "--interactive",
                              "Interactive Mode.")
    }

    builder.add_choice(:upgrade, :type=>:boolean, :default=>false) { |command_line|
      command_line.uses_switch("--upgrade",
                              "Upgrade config file and database.")
    }

    # Options
    #builder.add_choice(:option, :type=>:string) { |command_line|
    #  command_line.uses_option("-o", "--option ARG",
    #                          "Option description.")
    #}

  end # def add_choices

  # This method is called automatically by UserChoices.
  # Use it to handle simple post processing of user choices.
  def postprocess_user_choices
    @user_choices[:srcdir]    = @user_choices[:cmdArg].shift
    @user_choices[:srcfile]   = @user_choices[:cmdArg].shift
    @user_choices[:state]     = @user_choices[:cmdArg].shift
    @user_choices[:prevstate] = @user_choices[:cmdArg].shift
    @user_choices[:msg]       = @user_choices[:cmdArg].shift
    @user_choices[:label]     = @user_choices[:cmdArg].shift
  end


  # Execute the TorrentProcessor application.
  # This method is called automatically when 'torrentprocessor(.rb)' is executed from the command line.
  def execute
    if(@user_choices[:version])
      puts TorrentProcessor::logo()
      return
    end

    if(@user_choices[:init])
      puts TorrentProcessor::logo()
      @controller.setup_app()
      return
    end

    if(@user_choices[:interactive])
      puts TorrentProcessor::logo()
      puts
      @controller.interactive_mode()
      return
    end

    if(@user_choices[:upgrade])
      puts TorrentProcessor::logo()
      puts
      @controller.upgrade_app()
      return
    end

    if(@user_choices[:cmdArg].empty?) # If no cmd line arg...
      @controller.no_cmd_line_arg()                                # Will raise an error of there's a problem.
    else
      @controller.process_cmd_line_args(@user_choices[:cmdArg])    # Will raise an error of there's a problem.
    end

    @controller.upgrade_database()

    @controller.process()
  end # def execute


end # class TorrentProcessorApp


# Uncomment the next line if this file can be both loaded via 'require' AND called from the command line.
#if $0 == __FILE__
  begin
    TorrentProcessorApp.new.execute
  rescue SystemExit

  rescue Exception => e
    puts "An error has occurred.\nPlease send the following information to support@ktechSystems.com:"
    puts "\t" + e.message
    puts
    if TorrentProcessor::VERSION.include?('alpha') ||
       TorrentProcessor::VERSION.include?('beta') ||
       TorrentProcessor::VERSION.include?('pre')
      puts "Exception type: #{e.class.to_s}"
      puts e.backtrace
      puts
    end
  end
#end
